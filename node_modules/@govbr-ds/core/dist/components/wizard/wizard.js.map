{"version":3,"file":"components/wizard/wizard.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;ACVmD;;AAEnD;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8BAA8B;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iCAAiC;AAC7E,4CAA4C,iCAAiC;AAC7E;AACA;AACA;AACA;AACA,0DAA0D,mCAAmC;AAC7F;AACA,4CAA4C,iCAAiC;AAC7E;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA,6FAA6F,WAAW;AACxG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sEAAe,wDAAQ;;;;;;ACrPvB","sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/./src/components/wizard/wizard.js","webpack://core/./src/components/wizard/_wizard.scss?8b52"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"core\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory();\n\telse\n\t\troot[\"core\"] = factory();\n})(self, () => {\nreturn ","import Swipe from '../../partial/js/behavior/swipe'\n\n/** Classe para instanciar um objeto BRWizard*/\nclass BRWizard {\n  /**\n   * Instância do componente\n   * @param {string} name - nome do componente\n   * @param {object} component - referencia ao objeto do DOM\n   **/\n  constructor(name, component) {\n    this.name = name\n    this.component = component\n    this.DOMstrings = {\n      stepFormPanelClass: 'wizard-panel',\n      stepFormPanels: this.component.querySelectorAll('.wizard-panel'),\n      stepNextBtnClass: 'wizard-btn-next',\n      stepPrevBtnClass: 'wizard-btn-prev',\n      stepsBar: this.component.querySelector('.wizard-progress'),\n      stepsBarClass: 'wizard-progress',\n      stepsBtnClass: 'wizard-progress-btn',\n      stepsBtns: this.component.querySelectorAll('.wizard-progress-btn'),\n      stepsForm: this.component.querySelector('.wizard-form'),\n    }\n    /**\n     * Retira o atributo de uma lista de elementos\n     * @param {object[]} elementSet - Lista de objetos\n     * @param {string} attrName - Nome do atribbuto\n     */\n    this.removeAttributes = (elemSet, attrName) => {\n      elemSet.forEach((elem) => {\n        elem.removeAttribute(attrName)\n      })\n    }\n    /**\n     * Adiciona o atributo de uma lista de elementos\n     * @param {object[]} elementSet - Lista de objetos\n     * @param {string} attrName - Nome do atribbuto\n     * @param {string} value - Valor do atribbuto\n     */\n    this.setAttributes = (elemSet, attrName, value) => {\n      elemSet.forEach((elem) => {\n        elem.setAttribute(attrName, value)\n      })\n    }\n\n    /**\n     * Retorna o elemento pai do objeto com a classe de referência\n     * @param {object} elem - Lista de objetos\n     * @param {string} parentClass - nome da classe de referência\n     * @returns {object}\n     */\n    this.findParent = (elem, parentClass) => {\n      let currentNode = elem\n      while (!currentNode.classList.contains(parentClass)) {\n        currentNode = currentNode.parentNode\n      }\n      return currentNode\n    }\n\n    /**\n     * Retorna o índice do elemento botão de passo\n     * @param {object} elem - botão de passo\n     * @returns {number}\n     */\n    this.getActiveStep = (elem) => {\n      return Array.from(this.DOMstrings.stepsBtns).indexOf(elem)\n    }\n\n    /**\n     * Define o estado do botão ativo e limpa os demais estados dos botões\n     * @param {number} activeStepNum - número do botão ativo\n     */\n    this.setActiveStep = function (activeStepNum) {\n      this.removeAttributes(this.DOMstrings.stepsBtns, 'active')\n      this.setAttributes(this.DOMstrings.stepsBtns, 'aria-selected', 'false')\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        if (index === activeStepNum) {\n          elem.removeAttribute('disabled')\n          elem.setAttribute('active', '')\n          elem.setAttribute('aria-selected', 'true')\n        }\n      })\n    }\n\n    /**\n     * Move o focus para o primeiro elemento na área de conteúdo do wizard que tenha o tabindex igual ou maior que 0\n     * @param {number} actualNumber - número do passo ativo\n     */ this.setFocusOnFirstElementPanel = (actualNumber) => {\n      if (actualNumber) {\n        const panelToFind = this.DOMstrings.stepFormPanels[actualNumber]\n        panelToFind.querySelectorAll('.wizard-panel-content *').forEach((item) => {\n          if (item.tabIndex >= 0) item.focus()\n        })\n      }\n    }\n\n    /**\n     * Retorna o índice do painel ativo\n     * @returns {number}\n     */\n    this.getActivePanel = () => {\n      let activePanel\n      this.DOMstrings.stepFormPanels.forEach((elem) => {\n        if (elem.hasAttribute('active')) {\n          activePanel = elem\n        }\n      })\n      return activePanel\n    }\n\n    /**\n     * Abre o painel ativo e fecha paineis inativos\n     * @param {number} activePanelNum - numero do painel\n     */\n    this.setActivePanel = (activePanelNum) => {\n      // remove active class from all the panels\n      this.removeAttributes(this.DOMstrings.stepFormPanels, 'active')\n      // show active panel\n      this.DOMstrings.stepFormPanels.forEach((elem, index) => {\n        if (index === activePanelNum) {\n          elem.setAttribute('active', '')\n        }\n      })\n    }\n\n    /**\n     * Define números dos passos\n     */\n    this.setStepsNum = () => {\n      this.DOMstrings.stepsBtns.forEach((elem, index) => {\n        elem.setAttribute('step', index + 1)\n      })\n    }\n\n    /**\n     * Define passo e painel ativo\n     * @param {number} num - numero do passo\n     */\n    this.setStep = (num) => {\n      const activeStep = num <= this.DOMstrings.stepsBtns.length ? num - 1 : 0\n      this.setActivePanel(activeStep)\n      this.setFocusOnFirstElementPanel(activeStep)\n      this.setActiveStep(activeStep)\n    }\n\n    /**\n     * Retrai painel de passos\n     */\n    this.collapseSteps = () => {\n      this.component.setAttribute('collapsed', '')\n    }\n\n    /**\n     * Expande painel de passos\n     */\n    this.expandSteps = () => {\n      this.component.removeAttribute('collapsed')\n    }\n\n    this._setBehavior()\n  }\n\n  /**\n   * Define os comportamentos do componente\n   * @private\n   */\n  _setBehavior() {\n    /**\n     * Mapeia clique na barra de passos\n     */\n    this.DOMstrings.stepsBar.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      if (!eventTarget.classList.contains(`${this.DOMstrings.stepsBtnClass}`)) {\n        e.target.parentNode.click()\n        return\n      }\n      const activeStep = this.getActiveStep(eventTarget)\n      this.setActiveStep(activeStep)\n      this.setActivePanel(activeStep)\n      this.setFocusOnFirstElementPanel(activeStep)\n    })\n\n    /**\n     * Mapeia clique nos botões de navegação\n     */\n    this.DOMstrings.stepsForm.addEventListener('click', (e) => {\n      const eventTarget = e.target\n      if (\n        !(\n          eventTarget.classList.contains(`${this.DOMstrings.stepPrevBtnClass}`) ||\n          eventTarget.classList.contains(`${this.DOMstrings.stepNextBtnClass}`)\n        )\n      ) {\n        return\n      }\n      const activePanel = this.findParent(eventTarget, `${this.DOMstrings.stepFormPanelClass}`)\n      let activePanelNum = Array.from(this.DOMstrings.stepFormPanels).indexOf(activePanel)\n      if (eventTarget.classList.contains(`${this.DOMstrings.stepPrevBtnClass}`)) {\n        activePanelNum -= 1\n        activePanel.style.left = '1%'\n      } else {\n        activePanelNum += 1\n        activePanel.style.left = '-1%'\n      }\n      this.setActiveStep(activePanelNum)\n      this.setActivePanel(activePanelNum)\n      this.setFocusOnFirstElementPanel(activePanelNum)\n    })\n\n    this.setStepsNum()\n\n    if (this.component.hasAttribute('step')) {\n      this.setStep(this.component.getAttribute('step'))\n    }\n\n    if (this.component.hasAttribute('scroll') && !this.component.hasAttribute('vertical')) {\n      const stepsWidth = Math.round(100 / this.DOMstrings.stepsBtns.length) - 0.5\n      this.DOMstrings.stepsBar.style.gridTemplateColumns = `repeat(auto-fit, minmax(100px, ${stepsWidth}% ))`\n    }\n\n    /**\n     * Configura gestos (swipe)\n     */\n    const dispatcher = new Swipe(this.DOMstrings.stepsBar)\n    if (this.component.hasAttribute('vertical')) {\n      dispatcher.on('SWIPE_LEFT', () => {\n        this.collapseSteps()\n      })\n      dispatcher.on('SWIPE_RIGHT', () => {\n        this.expandSteps()\n      })\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    } else {\n      this.DOMstrings.stepsBar.ontouchstart = () => {\n        this.expandSteps()\n      }\n      this.DOMstrings.stepsForm.ontouchstart = () => {\n        this.collapseSteps()\n      }\n    }\n  }\n}\n\nexport default BRWizard\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}